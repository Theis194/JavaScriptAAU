/** HTTP request method to indicate the desired action to be performed for a given resource. */
export declare enum HttpMethod {
    /** The CONNECT method establishes a tunnel to the server identified by the target resource. */
    CONNECT = "connect",
    /** The DELETE method deletes the specified resource. */
    DELETE = "delete",
    /** The GET method requests a representation of the specified resource. Requests using GET should only retrieve data. */
    GET = "get",
    /** The HEAD method asks for a response identical to that of a GET request, but without the response body. */
    HEAD = "head",
    /** The OPTIONS method is used to describe the communication options for the target resource. */
    OPTIONS = "options",
    /** The PATCH method is used to apply partial modifications to a resource. */
    PATCH = "patch",
    /** The POST method is used to submit an entity to the specified resource, often causing a change in state or side effects on the server. */
    POST = "post",
    /** The PUT method replaces all current representations of the target resource with the request payload. */
    PUT = "put",
    /** The TRACE method performs a message loop-back test along the path to the target resource. */
    TRACE = "trace"
}
/** HTTP request protocol. */
export declare enum HttpProtocol {
    /** Unencrypted HTTP protocol. */
    HTTP = "http",
    /** Encrypted HTTPS protocol. */
    HTTPS = "https"
}
/** HTTP request or response headers. */
export declare class HttpHeaders {
    private headers;
    constructor(headers?: {
        [name: string]: string | string[];
    });
    /**
     * The first header value for the given header name, if any.
     *
     * @param headerName Header name.
     *
     * @returns The first header value, or null if none.
     * @see #getAll
     */
    get(headerName: string): string | null;
    /**
     * All header values for the given header name.
     *
     * @param headerName The header name.
     *
     * @returns an immutable list of header values, or an empty list if none
     * @see #get
     */
    getAll(headerName: string): string[];
    toJSON(): object;
}
/** HTTP request query parameters. */
export declare class HttpQueryParameters {
    private parameters;
    constructor(parameters?: {
        [name: string]: string | string[];
    });
    /**
     * The first parameter value for the given parameter name, if any.
     *
     * @param parameterName The parameter name.
     *
     * @returns The first parameter value, or null if none.
     * @see #getAll
     */
    get(parameterName: string): string | null;
    /**
     * All parameter values for the given parameter name.
     *
     * @param parameterName The parameter name.
     *
     * @returns a list of parameter values, or an empty list if none
     * @see #get
     */
    getAll(parameterName: string): string[];
    toJSON(): object;
}
/** HTTP request. */
export interface HttpRequest {
    timestamp?: Date;
    method: HttpMethod;
    protocol: HttpProtocol;
    host: string;
    headers: HttpHeaders;
    body?: string;
    path: string;
    pathname: string;
    query: HttpQueryParameters;
}
/** HTTP request. */
export interface HttpRequestFromPath {
    timestamp?: Date;
    method: HttpMethod;
    protocol: HttpProtocol;
    host: string;
    headers: {
        [name: string]: string | string[];
    };
    body?: string;
    path: string;
}
/** HTTP request. */
export interface HttpRequestFromPathNameAndQuery {
    timestamp?: Date;
    method: HttpMethod;
    protocol: HttpProtocol;
    host: string;
    headers: {
        [name: string]: string | string[];
    };
    body?: string;
    pathname: string;
    query: {
        [name: string]: string | string[];
    };
}
export declare class HttpRequestBuilder {
    static fromPath(requestData: HttpRequestFromPath): HttpRequest;
    static fromPathnameAndQuery(requestData: HttpRequestFromPathNameAndQuery): HttpRequest;
}
export interface HttpResponse {
    timestamp?: Date;
    statusCode: number;
    headers: HttpHeaders;
    body?: string;
}
export interface HttpResponseData {
    timestamp?: Date | string;
    statusCode: number | string;
    headers: {
        [name: string]: string | string[];
    };
    body?: string;
}
export declare class HttpResponseBuilder {
    static from(responseData: HttpResponseData): HttpResponse;
}
export interface HttpExchange {
    request: HttpRequest;
    response: HttpResponse;
}
export declare class HttpExchangeReader {
    static fromJson(json: string): HttpExchange;
    static fromJsonLines(jsonLines: string, callback: (exchange: HttpExchange) => void): void;
}
export declare class HttpExchangeWriter {
    buffer: string;
    write(exchange: HttpExchange): void;
}
